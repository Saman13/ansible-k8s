---

- name: Create etcd config directory
  ansible.builtin.file:
    path: /etc/etcd
    state: directory

- name: Create etcd data directory
  ansible.builtin.file:
    path: /var/lib/etcd
    state: directory

- name: Copy certificates for etcd
  ansible.builtin.copy:
    src: "{{ cert_dir }}/{{ item }}"
    dest: "{{ etcd_conf_dir }}"
    remote_src: true
  with_items:
    - "ca.key"
    - "ca.crt"
    - "kube-api-server.key"
    - "kube-api-server.crt"

- name: Is etcd installed
  ansible.builtin.stat:
    path: "{{ binary_extract_dir }}/etcd-v{{ etcd_version }}-linux-amd64"
  register: etcd_dir

- block:

  - name: Extract etcd
    ansible.builtin.unarchive:
      src: https://github.com/etcd-io/etcd/releases/download/v{{ etcd_version }}/etcd-v{{ etcd_version }}-linux-amd64.tar.gz
      dest: /opt
      remote_src: yes

  - name: Create symlinks to /usr/local/bin
    ansible.builtin.file:
      src: "{{ binary_extract_dir }}/etcd-v{{ etcd_version }}-linux-amd64/{{ item }}"
      path: "{{ binary_dir }}/{{ item | basename }}"
      state: link
    with_items:
      - etcd
      - etcdctl

  when:
    - not etcd_dir.stat.exists


- name: Install service etcd
  ansible.builtin.template:
    src: etcd.service.j2
    dest: /etc/systemd/system/etcd.service
    mode: '0644'
  notify:
    - reload systemd

- name: Enable and start etcd service
  ansible.builtin.systemd:
    name: etcd
    state: started
    enabled: yes

- name: Check started service
  ansible.builtin.service:
    name: etcd
    state: started
  register: etcd_service_status

- name: Terminate playbook if service is not running
  ansible.builtin.fail:
    msg: "The etcd service is not running. Playbook has stoped."
  when: etcd_service_status.state != 'started'
